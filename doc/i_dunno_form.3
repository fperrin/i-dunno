.\" Automatically generated by Pandoc 2.5
.\"
.TH "i_dunno_form" "3" "" "" ""
.hy
.SH SYNOPSIS
.IP
.nf
\f[C]
#include <i\-dunno.h>

const char *i_dunno_form(int af, const void *src,
                         char *dst, socklen_t size,
                         int flags);
\f[R]
.fi
.SH DESCRIPTION
.PP
This function forms an I\-DUNNO address.
.TP
.B \f[B]af\f[R]
one of \f[I]\f[CI]AF_INET\f[I]\f[R] or \f[I]\f[CI]AF_INET6\f[I]\f[R].
.TP
.B \f[B]src\f[R]
points to a \f[I]\f[CI]struct in_addr\f[I]\f[R] or
\f[I]\f[CI]struct in6_addr\f[I]\f[R], which is formed into an I\-DUNNO
representation.
.TP
.B \f[B]dst\f[R]
points to a buffer of size \f[I]\f[CI]size\f[I]\f[R] where the resulting
I\-DUNNO representation is stored.
That buffer should be at least \f[I]\f[CI]I_DUNNO_ADDRSTRLEN\f[I]\f[R]
long.
.TP
.B \f[B]flags\f[R]
specifies the required complexity of the final address.
The following values can be specified:
.IP \[bu] 2
\f[C]I_DUNNO_MINIMUM_CONFUSION\f[R]
.IP \[bu] 2
\f[C]I_DUNNO_SATISFACTORY_CONFUSION\f[R]
.IP \[bu] 2
\f[C]I_DUNNO_DELIGHTFUL_CONFUSION\f[R]
.SH RETURN VALUE
.PP
\f[B]\f[CB]i_dunno_form\f[B]\f[R] returns \f[I]\f[CI]buf\f[I]\f[R] if it
succeeds, or \f[I]\f[CI]NULL\f[I]\f[R] otherwise.
In case of failure, \f[I]\f[CI]errno\f[I]\f[R] might contain a clue of
what went wrong, but most likely won\[cq]t.
\f[I]\f[CI]dst\f[I]\f[R] is bound to be modified even on failure.
